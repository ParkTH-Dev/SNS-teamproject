{"ast":null,"code":"var _jsxFileName = \"/Users/aerimmp/Desktop/facebook/src/App.js\",\n  _s = $RefreshSig$();\nimport styled from \"styled-components\";\nimport { Routes, Route } from \"react-router-dom\";\nimport Main from \"./pages/Main\";\nimport Login from \"./pages/Login\";\nimport Signup from \"./pages/Signup\";\nimport Detail from \"./pages/Detail\";\nimport GlobalStyles from \"./styles/GlobalStyles.styles\";\nimport React, { useEffect, useReducer } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Wrapper = styled.div``;\n_c = Wrapper;\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"INIT\":\n      return action.data;\n    //초기화 데이터\n    case \"ADD_USER\":\n      {\n        const newState = {\n          ...state,\n          users: [...state.users, action.newUser]\n        };\n        return newState;\n      }\n    case \"ADD_POST\":\n      {\n        // posts 배열에 새 포스트 추가\n        const updatedPosts = [action.newPost, ...state.posts];\n        return {\n          ...state,\n          posts: updatedPosts\n        };\n      }\n    case \"UPDATE_USER_POSTS\":\n      {\n        // users 배열에서 해당 userId를 가진 사용자의 posts에 새로운 postId 추가\n        const updatedUsers = state.users.map(user => user.id === action.userId ? {\n          ...user,\n          posts: [...user.posts, action.newPostId]\n        } // posts 배열에 새 postId 추가\n        : user);\n        return {\n          ...state,\n          users: updatedUsers\n        };\n      }\n    case \"ADD_COMMENT\":\n      {\n        // 포스트 ID에 맞는 포스트를 찾아서 댓글 추가\n        const updatedPosts = state.posts.map(post => {\n          if (post.id === action.postId) {\n            // 해당 포스트의 comments 배열에 새로운 댓글 추가\n            return {\n              ...post,\n              comments: [...post.comments, action.newComment]\n            };\n          }\n          return post;\n        });\n        return {\n          ...state,\n          posts: updatedPosts\n        };\n      }\n    case \"UPDATE_USER\":\n      {\n        const updatedUsers = state.users.map(user => user.id === action.updatedUser.id ? action.updatedUser : user);\n        return {\n          ...state,\n          users: updatedUsers\n        };\n      }\n    case \"DELETE_POST\":\n      {\n        const updatedPosts = state.posts.filter(post => post.id !== action.targetId);\n        return {\n          ...state,\n          posts: updatedPosts\n        };\n      }\n    default:\n      return state;\n  }\n};\nexport const DataStateContext = /*#__PURE__*/React.createContext();\nexport const DataDispatchContext = /*#__PURE__*/React.createContext();\nfunction App() {\n  _s();\n  const initialState = {\n    users: [],\n    posts: [],\n    stories: [],\n    groups: [],\n    liveCommerce: [],\n    likeCategory: []\n  };\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const fetchData = async () => {\n    try {\n      const response = await fetch(\"./mockData/mockData.json\");\n      const data = await response.json();\n      dispatch({\n        type: \"INIT\",\n        data\n      });\n    } catch (error) {\n      console.error(\"데이터를 불러오지 못했습니다.\", error);\n    }\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const onCreatePost = (userId, content, image = null) => {\n    const newPostId = Date.now().toString();\n    dispatch({\n      type: \"ADD_POST\",\n      newPost: {\n        id: newPostId,\n        userId: userId,\n        content: content,\n        image: image ? [image] : [null],\n        createdAt: new Date().toISOString(),\n        likes: 0,\n        comments: []\n      }\n    });\n    dispatch({\n      type: \"UPDATE_USER_POSTS\",\n      userId: userId,\n      newPostId: newPostId\n    });\n  };\n  const onCreateComment = (postId, userId, content) => {\n    const newCommentId = Date.now().toString(); // 고유한 댓글 ID 생성\n    dispatch({\n      type: \"ADD_COMMENT\",\n      postId: postId,\n      //댓글이 달릴 포스트 ID\n      newComment: {\n        id: newCommentId,\n        //고유한 댓글 ID\n        userId: userId,\n        //댓글 작성자 ID\n        content: content,\n        //댓글 내용\n        createdAt: new Date().toISOString() //댓글 작성 시간\n      }\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GlobalStyles, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(DataStateContext.Provider, {\n      value: state,\n      children: /*#__PURE__*/_jsxDEV(DataDispatchContext.Provider, {\n        value: {\n          onCreatePost,\n          onCreateComment\n        },\n        children: /*#__PURE__*/_jsxDEV(Wrapper, {\n          children: /*#__PURE__*/_jsxDEV(Routes, {\n            children: [/*#__PURE__*/_jsxDEV(Route, {\n              path: \"/\",\n              element: /*#__PURE__*/_jsxDEV(Main, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 138,\n                columnNumber: 40\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/login\",\n              element: /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 139,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 139,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/signup\",\n              element: /*#__PURE__*/_jsxDEV(Signup, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 140,\n                columnNumber: 46\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/detail\",\n              element: /*#__PURE__*/_jsxDEV(Detail, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 141,\n                columnNumber: 46\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 141,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(App, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c2 = App;\nexport default App;\nvar _c, _c2;\n$RefreshReg$(_c, \"Wrapper\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"names":["styled","Routes","Route","Main","Login","Signup","Detail","GlobalStyles","React","useEffect","useReducer","jsxDEV","_jsxDEV","Fragment","_Fragment","Wrapper","div","_c","reducer","state","action","type","data","newState","users","newUser","updatedPosts","newPost","posts","updatedUsers","map","user","id","userId","newPostId","post","postId","comments","newComment","updatedUser","filter","targetId","DataStateContext","createContext","DataDispatchContext","App","_s","initialState","stories","groups","liveCommerce","likeCategory","dispatch","fetchData","response","fetch","json","error","console","onCreatePost","content","image","Date","now","toString","createdAt","toISOString","likes","onCreateComment","newCommentId","children","fileName","_jsxFileName","lineNumber","columnNumber","Provider","value","path","element","_c2","$RefreshReg$"],"sources":["/Users/aerimmp/Desktop/facebook/src/App.js"],"sourcesContent":["import styled from \"styled-components\";\nimport { Routes, Route } from \"react-router-dom\";\nimport Main from \"./pages/Main\";\nimport Login from \"./pages/Login\";\nimport Signup from \"./pages/Signup\";\nimport Detail from \"./pages/Detail\";\nimport GlobalStyles from \"./styles/GlobalStyles.styles\";\nimport React, { useEffect, useReducer } from \"react\";\n\nconst Wrapper = styled.div``;\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"INIT\":\n      return action.data; //초기화 데이터\n    case \"ADD_USER\": {\n      const newState = { ...state, users: [...state.users, action.newUser] };\n      return newState;\n    }\n    case \"ADD_POST\": {\n      // posts 배열에 새 포스트 추가\n      const updatedPosts = [action.newPost, ...state.posts];\n      return { ...state, posts: updatedPosts };\n    }\n    case \"UPDATE_USER_POSTS\": {\n      // users 배열에서 해당 userId를 가진 사용자의 posts에 새로운 postId 추가\n      const updatedUsers = state.users.map((user) =>\n        user.id === action.userId\n          ? { ...user, posts: [...user.posts, action.newPostId] } // posts 배열에 새 postId 추가\n          : user\n      );\n      return { ...state, users: updatedUsers };\n    }\n\n    case \"ADD_COMMENT\": {\n      // 포스트 ID에 맞는 포스트를 찾아서 댓글 추가\n      const updatedPosts = state.posts.map((post) => {\n        if (post.id === action.postId) {\n          // 해당 포스트의 comments 배열에 새로운 댓글 추가\n          return {\n            ...post,\n            comments: [...post.comments, action.newComment],\n          };\n        }\n        return post;\n      });\n\n      return { ...state, posts: updatedPosts };\n    }\n\n    case \"UPDATE_USER\": {\n      const updatedUsers = state.users.map((user) =>\n        user.id === action.updatedUser.id ? action.updatedUser : user\n      );\n      return { ...state, users: updatedUsers };\n    }\n\n    case \"DELETE_POST\": {\n      const updatedPosts = state.posts.filter(\n        (post) => post.id !== action.targetId\n      );\n      return { ...state, posts: updatedPosts };\n    }\n    default:\n      return state;\n  }\n};\n\nexport const DataStateContext = React.createContext();\nexport const DataDispatchContext = React.createContext();\n\nfunction App() {\n  const initialState = {\n    users: [],\n    posts: [],\n    stories: [],\n    groups: [],\n    liveCommerce: [],\n    likeCategory: [],\n  };\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const fetchData = async () => {\n    try {\n      const response = await fetch(\"./mockData/mockData.json\");\n      const data = await response.json();\n      dispatch({ type: \"INIT\", data });\n    } catch (error) {\n      console.error(\"데이터를 불러오지 못했습니다.\", error);\n    }\n  };\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const onCreatePost = (userId, content, image = null) => {\n    const newPostId = Date.now().toString();\n    dispatch({\n      type: \"ADD_POST\",\n      newPost: {\n        id: newPostId,\n        userId: userId,\n        content: content,\n        image: image ? [image] : [null],\n        createdAt: new Date().toISOString(),\n        likes: 0,\n        comments: [],\n      },\n    });\n    dispatch({\n      type: \"UPDATE_USER_POSTS\",\n      userId: userId,\n      newPostId: newPostId,\n    });\n  };\n\n  const onCreateComment = (postId, userId, content) => {\n    const newCommentId = Date.now().toString(); // 고유한 댓글 ID 생성\n    dispatch({\n      type: \"ADD_COMMENT\",\n      postId: postId, //댓글이 달릴 포스트 ID\n      newComment: {\n        id: newCommentId, //고유한 댓글 ID\n        userId: userId, //댓글 작성자 ID\n        content: content, //댓글 내용\n        createdAt: new Date().toISOString(), //댓글 작성 시간\n      },\n    });\n  };\n\n  return (\n    <>\n      <GlobalStyles />\n      <DataStateContext.Provider value={state}>\n        <DataDispatchContext.Provider value={{ onCreatePost, onCreateComment }}>\n          <Wrapper>\n            <Routes>\n              <Route path=\"/\" element={<Main />} />\n              <Route path=\"/login\" element={<Login />} />\n              <Route path=\"/signup\" element={<Signup />} />\n              <Route path=\"/detail\" element={<Detail />} />\n            </Routes>\n          </Wrapper>\n        </DataDispatchContext.Provider>\n      </DataStateContext.Provider>\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}